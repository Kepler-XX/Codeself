#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Django settings for bastion project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import json
import logging
import os
import dj_database_url


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'czvzl9o8jyd9qtj&yb0-_w=%_g6k03i4l#ib6+s@s-+7#ua&14'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = Warning

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',
    "djcelery",
    'rest_framework'

]

MIDDLEWARE_CLASSES = [
    # 'django.middleware.security.Securityddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.common.CommonMiddleware',
    # # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pro_setting.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pro_setting.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    #'default': dj_database_url.parse(conf.DEFAULT_MYSQL_URL)
}


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',  # 指定缓存使用的引擎
        'LOCATION': 'unique-snowflake',  # 写在内存中的变量的唯一值
        'TIMEOUT': 3600 * 2,  # 缓存超时时间，这边只缓存相关的请求数据
        'OPTIONS': {
            'MAX_ENTRIES': 3000,  # 最大缓存记录的数量（默认300）
            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）
        }
    }
}
CACHE_REDIS_URL = '127.0.0.1'
BROKER_URL = CACHE_REDIS_URL
CELERY_RESULT_BACKEND = CACHE_REDIS_URL
CELERY_QUEUES = {
    "default": {
        "exchange": "default",
        "exchange_type": "cntrsec_direct",
        "routing_key": "default"
    }
}

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'EXCEPTION_HANDLER': 'common.generic.custom_exception_handler'
}

LOG_HANDLERS = ['syslog']

if DEBUG:
    LOG_HANDLERS = ['console']

# TODO 待解决json格式
# '[%(asctime)s] %(levelname)s %(pathname)s %(lineno)d  %(message)s  "URI":%(uri)s-"RET":%(ret)s-"REQUESTID":%(requestId)s'
import pythonjsonlogger.jsonlogger
# extra = "%(data)s" if "data"  else None

json_format = {
    "time": "%(asctime)s",
    "levelname": "%(levelname)s",
    "pathname": "%(pathname)s",
    "levelno": "%(lineno)d",
    "message":"%(message)s",
    "extra_message": "%(data)s",
}
SYSLOG_HOST = '106.14.206.19'
SYSLOG_PORT = 22

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'json': {
            'class': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': json.dumps(json_format),

        },
        'syslog': {
            'format': 'Django' + '_django: [%(asctime)s] %(levelname)s %(pathname)s %(lineno)d %(message)s "%(message)s"'
        },

    },
    'filters' : {
        'special':{
            # '()':'project.logging.SpecialFilter',
            # 'extra':None
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'formatter': 'json'
        },
        'syslog': {
            'class': 'logging.handlers.SysLogHandler',
            'level': 'DEBUG',
            'facility': 'local0',
            'formatter': 'syslog',
            'address': (SYSLOG_HOST, SYSLOG_PORT)
        },
    },
    'loggers': {
        'django.request': {
            'handlers': LOG_HANDLERS,
            'level': 'ERROR',
            'propagate': False
        },
        'django.db.backends': {
            'handlers': LOG_HANDLERS,
            'level': 'DEBUG',
            'propagate': False
        },
        'django.redis.cache': {
            'handlers': LOG_HANDLERS,
            'level': 'DEBUG',
            'propagate': False
        },
        'django': {
            'handlers': LOG_HANDLERS,
            'level': 'DEBUG',
            'propagate': False
        },
        'deafult': {
            'handlers': LOG_HANDLERS,
            'level': 'DEBUG',
            'propagate': False
        },
    },
    'root': {
        'handlers': LOG_HANDLERS,
        'level': 'DEBUG'
    },
}

# logging.LogRecord()
# logger = logging.getLogger()
# logging.LoggerAdapter(logger,extra=None)

# 配置logging.extra日志信息
# class JsonFilter(logging.Filter):
#     extra = None
#
#     def filter(self, record):
#         record.extra = self.extra
#         return True
#
# logging_filter = logging.Filter()
# logging_filter.filter = extra

# import logging.config
# logging.config.dictConfig(LOGGING)
# logging = logging.getLogger()
# filter_ = JsonFilter()
# logging.addFilter(filter_)

# LOGGING_CONFIG =None
# import logging.config
# logging.config.dictConfig(LOGGING)

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'



